[
  {
    "objectID": "users.html",
    "href": "users.html",
    "title": "DSTBX2025",
    "section": "",
    "text": "210.117.173.182 (연습용서버1) 접속방법\nssh toolbox@210.117.173.182\nssh toolbox@210.117.173.182 -p 1226\n210.117.173.183 (연습용서버2) 접속방법\nssh ymlee@210.117.173.183\nssh kjh010120@210.117.173.183\nssh gkem0222@210.117.173.183\nssh dyoluv12@210.117.173.183\nssh teq040810@210.117.173.183\nssh sg897652@210.117.173.183\nssh ksw628@210.117.173.183\nssh cktkdwls111@210.117.173.183\nssh gahee7682@210.117.173.183\nssh jkshhs73@210.117.173.183\n210.117.173.186 (학과서버) 접속방법\nssh root@210.117.173.186 -p 11600\nssh root@210.117.173.186 -p 21007\nssh root@210.117.173.186 -p 21036\nssh root@210.117.173.186 -p 27635\nssh root@210.117.173.186 -p 15824\n학번별사용가능포트\n\n\n\n\n\n\n\n학번\nPorts\n\n\n\n\n11600\n11600, 21600, 31600, 41600, 11610, 11620, 11630, 11640, 11650, 11660, 11670, 11680, 11690\n\n\n21007\n11007, 21007, 31007, 41007, 21017, 21027, 21037, 21047, 21057, 21067, 21077, 21087, 21097\n\n\n21036\n11036, 21036, 31036, 41036, 21046, 21056, 21066, 21076, 21086, 21096, 21106, 21116, 21126\n\n\n27635\n17635, 27635, 37635, 47635, 27645, 27655, 27665, 27675, 27685, 27695, 27705, 27715, 27725\n\n\n15824\n15824, 25824, 35824, 45824, 15834, 15844, 15854, 15864, 15874, 15884, 15894, 15904, 15914"
  },
  {
    "objectID": "posts/day1.html",
    "href": "posts/day1.html",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "",
    "text": "- 윈도우 컴퓨터에서 아래의 명령어가 뭘 의미하는지 살펴보자.\nls\nmkdir asdf\ncd asdf \ncd.. \nrmdir asdf\n\n외우세요: 터미널을 열어준다 = 컴퓨터에 대한 제어권을 준다\n\n\n\n\n\n\n\nImportant\n\n\n\n터미널명령어 숙지의 중요성을 이해했으면 해서 만들었어요.."
  },
  {
    "objectID": "posts/day1.html#터미널의-이해",
    "href": "posts/day1.html#터미널의-이해",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "",
    "text": "- 윈도우 컴퓨터에서 아래의 명령어가 뭘 의미하는지 살펴보자.\nls\nmkdir asdf\ncd asdf \ncd.. \nrmdir asdf\n\n외우세요: 터미널을 열어준다 = 컴퓨터에 대한 제어권을 준다\n\n\n\n\n\n\n\nImportant\n\n\n\n터미널명령어 숙지의 중요성을 이해했으면 해서 만들었어요.."
  },
  {
    "objectID": "posts/day1.html#터미널에서-조작하기",
    "href": "posts/day1.html#터미널에서-조작하기",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "2 터미널에서 조작하기",
    "text": "2 터미널에서 조작하기\n- 복사하기 & 붙여넣기\n\n복사하기: 드래그 + 우클릭\n붙여넣기: 우클릭\n\n- 자동완성: 탭!!\n\n\n\n\n\n\nImportant\n\n\n\n복붙하기 이거 작년에 많이 헤메시더라고요?? 익숙해져야합니당"
  },
  {
    "objectID": "posts/day1.html#파이썬-설치방법-조사",
    "href": "posts/day1.html#파이썬-설치방법-조사",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "3 파이썬 설치방법 조사",
    "text": "3 파이썬 설치방법 조사\n- 파이썬 배우는 초보자에게 가장 어려운것!\n\n선생님마다 설치하는 방법이 모두 다름\n\n- 왜 저렇게 설치방법이 다른가? 왜 다른 방법으로 각각 파이썬을 실행하는가? 이런것이 너무 어려움\n\n방법1: 파이썬프로그램 다운로드 -&gt; 시작버튼 눌러서 설치\n방법2: 아나콘다 설치 (그럼 자동으로 파이썬이 설치됨)\n방법3: 아나콘다 설치 + 가상환경\n…\n\n- 심지어 실행하는것도 다름\n\n방법1: 파이썬 프롬프트\n방법2: .py를 이용하여 실행?\n방법3: IDLE\n방법4: 파이참\n방법5: 스파이더\n방법6: Visual Studio Code\n방법7: 주피터노트북, 주피터랩\n\n가상환경을 만들어서 해라..\n아나콘다 네비게이터에 주피터가 있다..\n\n…\n\n- 머리아프니까 colab을 쓰라는 사람도 있음. 아니면 도커이미지를 줄테니까 그걸 쓰라는 사람도 있음. AWS를 쓰라는 사람도 있음..\n- 핵심: 그냥 (1) 컴퓨터에 (2) 파이썬을 깔아서 (3) 실행하는 것임\n- 의문: 그런데 방법이 왜이렇게 많은가? 엑셀처럼 프로그램 설치하고 아이콘 더블클릭하면 끝나는 식으로 만들어야 하는것 아닌가?"
  },
  {
    "objectID": "posts/day1.html#python-실행하고-살펴보기",
    "href": "posts/day1.html#python-실행하고-살펴보기",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "4 python 실행하고 살펴보기",
    "text": "4 python 실행하고 살펴보기\n- 윈도우에서 anaconda prompt 실행 -&gt; python\n(base) C:\\Users\\python&gt;python\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; [1,2,3]+[4]\n[1, 2, 3, 4]\n&gt;&gt;&gt; a=[1,2,3]+[4]\n&gt;&gt;&gt; a\n[1, 2, 3, 4]\n- 2개를 실행할 수도 있음. (두 환경은 각각 서로 독립적인 파이썬, 변수가 공유되지 않음) \\(\\star\\)\n- 아쉬운점: `?list’와 같이 도움말 기능이 동작하지 않음\n&gt;&gt;&gt; ?list\n  File \"&lt;stdin&gt;\", line 1\n    ?list\n    ^\nSyntaxError: invalid syntax\n&gt;&gt;&gt;"
  },
  {
    "objectID": "posts/day1.html#python-으로-코딩하기-최악",
    "href": "posts/day1.html#python-으로-코딩하기-최악",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "5 python 으로 코딩하기 (최악)",
    "text": "5 python 으로 코딩하기 (최악)\n- 1부터 10까지 합을 구하는 프로그램을 만들고 싶음\n- 시도1: python을 키고 아래와 같이 실행\n(base) C:\\Users\\python&gt;python\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; total = 0\n&gt;&gt;&gt; for i in range(10):\n...     total=total+i\n...\n&gt;&gt;&gt; total\n45\n&gt;&gt;&gt;\n- 반성: 정답은 55인데 45가 출력되었다! \\(\\to\\) range(10)을 range(1,11)으로 바꿔야겠다!\n- 시도2: range(1,11)을 바꿔야겠다고 생각하고 다시 입력하다가 오타가 발생\n&gt;&gt;&gt; total =0\n&gt;&gt;&gt; for i in range(1,11):\n...     total = totla +i\n...\n\n앗 totla이라고 잘못쳤다.\n\n- 반성: 다음에는 정신을 똑바로 차려야겠다."
  },
  {
    "objectID": "posts/day1.html#ipython-실행하고-살펴보기",
    "href": "posts/day1.html#ipython-실행하고-살펴보기",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "6 ipython 실행하고 살펴보기",
    "text": "6 ipython 실행하고 살펴보기\n- 윈도우에서 anaconda prompt 실행 -&gt; ipython\n(base) C:\\Users\\python&gt;ipython\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: a=[1,2,3]\n\nIn [2]: a\nOut[2]: [1, 2, 3]\n\nIn [3]: a+[4]\nOut[3]: [1, 2, 3, 4]\n- ?list가 가능\nIn [4]: ?list\nInit signature: list(iterable=(), /)\nDocstring:\nBuilt-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\nType:           type\nSubclasses:     _HashedSeq, StackSummary, DeferredConfigList, SList, _ImmutableLineList, FormattedText, NodeList, _ExplodedList, Stack, _Accumulator, ...\n- 색깔이 알록달록해서 문법을 보기 편하다. (구문강조)"
  },
  {
    "objectID": "posts/day1.html#ipython-으로-코딩하기",
    "href": "posts/day1.html#ipython-으로-코딩하기",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "7 ipython 으로 코딩하기",
    "text": "7 ipython 으로 코딩하기\n- ipython을 사용한 프로그래머는 좀더 상황이 낫다\n(base) C:\\Users\\python&gt;ipython\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: total = 0\n\nIn [2]: for i in range(1,11):\n   ...:     total = total + i\n   ...:\n\nIn [3]: total\nOut[3]: 55"
  },
  {
    "objectID": "posts/day1.html#메모장-python",
    "href": "posts/day1.html#메모장-python",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "8 메모장 + python",
    "text": "8 메모장 + python\n- 메모장을 키고 아래의 내용을 적는다.\ntotal = 0 \nfor i in range(1,11): \n    total = total + i\nprint(total)\n- 파일이름을 mysum.py로 저장한다.\n- anaconda prompt에서 mysum.py파일이 저장된 폴더로 이동 -&gt; 실행\n(base) C:\\Users\\python&gt;cd Desktop\n\n(base) C:\\Users\\python\\Desktop&gt;dir\n C 드라이브의 볼륨에는 이름이 없습니다.\n 볼륨 일련 번호: 9AFD-A05F\n\n C:\\Users\\python\\Desktop 디렉터리\n\n2022-03-27  오전 11:32    &lt;DIR&gt;          .\n2022-03-27  오전 11:32    &lt;DIR&gt;          ..\n2022-03-27  오전 12:01             2,306 Chrome.lnk\n2022-03-26  오후 08:32             2,332 Microsoft Edge.lnk\n2022-03-27  오전 11:33                71 mysum.py\n               3개 파일               4,709 바이트\n               2개 디렉터리  743,643,467,776 바이트 남음\n\n(base) C:\\Users\\python\\Desktop&gt;python mysum.py\n55\n\n(base) C:\\Users\\python\\Desktop&gt;\n- 소감\n\n편한점1: 마우스를 이용하여 이동가능\n편한점2: 내가 작업한 내용은 바탕화면의 메모장에 저장이 되어있음\n아쉬운점: ipython의 장점은 활용못함 (구문강조, 도움말기능)"
  },
  {
    "objectID": "posts/day1.html#메모장-ipython",
    "href": "posts/day1.html#메모장-ipython",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "9 메모장 + ipython",
    "text": "9 메모장 + ipython\n- 전체적인 개발방식\n\n메모장: 코드를 편집, 저장\nipython: anaconda prompt처럼 메모장의 코드를 실행하고 결과를 확인 + 구문강조, 도움말확인기능 등을 이용하여 짧은 코드를 빠르게 작성\n\n- 기능\n\nipython에서 !python mysum.py를 입력하면 anaconda prompt에서 python mysum.py를 입력한 것과 같은 효과\nipython에서 %run mysum을 입력하면 메모장에서 mysum.py에 입력된 내용을 복사해서 ipython에 붙여넣어 실행한것과 같은 효과\n\n\n! 는 터미널 명령을 훔쳐쓰는 기능. % 는 ipython 에서 제공하는 마법같은 기능. 이 두개를 잘 쓰면 ipynb에서 작업하기 매우 편리함."
  },
  {
    "objectID": "posts/day1.html#jupyterlab",
    "href": "posts/day1.html#jupyterlab",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "10 Jupyterlab",
    "text": "10 Jupyterlab\n- 메모장과 ipython을 하나로 통합한 프로그램이 등장!\n\njupyter notebook, jupyter lab\nspyder\nidle\nVScode\n…\n\n- 주피터노트북, 혹은 주피터랩을 켜보자.\n(base) C:\\Users\\python&gt;jupyter lab \n\n셀에서 1+1 수행\n셀에서 !dir 등의 명령어 실행\n\n- 주피터의 트릭 (실제로 주피터는 ipython에 기생할 뿐 아무런 역할도 안해요)\n\n주피터를 실행\n새 노트북을 생성\n\n컴퓨터는 내부적으로 ipython을 실행하고 그 ipython이랑 여러분이 방금만든 그 노트북과 연결\n\n처음보이는 cell에 1+1을 입력 -&gt; 쉬프트엔터 -&gt; 결과2가 출력\n\n처음보이는 cell하나 = 자동으로 열린 하나의 메모장\ncell 1+1을 입력 = 메모장에 1+1을 적음\n쉬프트+엔터후 결과2를 출력 = cell의 내용을 복사 -&gt; ipython에 붙여넣음 -&gt; ipython 계산된 결과를 복사 -&gt; cell로 돌아와 붙여넣기\n\n새로운 cell을 추가하고 2+2을 입력 -&gt; 쉬프트엔터 -&gt; 결과4가 출력\n\n새로운 cell을 추가 = 새로운 메모장 추가\ncell 2+2을 입력 = 새로운 메모장에 2+2를 적음\n쉬프트+엔터후 결과4를 출력 = cell의 내용을 복사 -&gt; ipython에 붙여넣음 -&gt; ipython 계산된 결과를 복사 -&gt; cell로 돌아와 붙여넣기\n\n\n- 중요한 사실들\n\nIDE는 내부적으로 연산을 수행하는 능력이 없다. (생각해볼것: 왜 R을 꼭 설치하고 Rstudio를 설치해야 했을까?)\n주피터에서 커널을 재시작한다는 의미는 메모장이 열린채로 ipython을 껐다가 다시 실행한다는 의미\n주피터는 단순히 ’메모장의 내용을 복사하여 붙여넣는 기계’라고 볼 수 있다. 이렇게 생각하면 주피터는 꼭 ipython에 연결할 이유는 없다. 실제로 주피터에 R을 연결해서 쓸 수 있다. 즉 하나의 IDE가 여러개의 언어와 연결될 수 있다.\nJupyterlab이라는 프로그램은 크롬에 있는 내용과 ipython간의 통신을 제어하는 프로그램일 뿐이다.\n\n\n\n\n\n\n\nImportant\n\n\n\nLanguage, Kernel, IDE 의 차이점을 이해하는게 중요함"
  },
  {
    "objectID": "posts/day1.html#원격클라우드-컴퓨터",
    "href": "posts/day1.html#원격클라우드-컴퓨터",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "11 원격/클라우드 컴퓨터",
    "text": "11 원격/클라우드 컴퓨터\n- 지금까지는 ipython이 실행되는 컴퓨터와 크롬이 실행되는 컴퓨터가 동일하다는 전제였음.\n- 생각해보니까 어차피 ipython이 실행된 컴퓨터에서 내가 크롬에 입력한 명령 “전달”되기만 하면 되므로 꼭 같은 컴퓨터일 필요는 없다.\n\n11.1 모델1 – 원격컴퓨터 (일대일)\n- 준비상태\n\n학과서버: ipython을 실행 + 이 컴퓨터는 인터넷 연결이 되어있어야함\n규빈노트북: 크롬실행 + 이 컴퓨터도 인터넷이 연결되어 있어야함\n\n- 명령입력\n\n규빈노트북의 크롬에서 1+1을 입력하고 쉬프트 엔터를 누름\n\n- 규빈노트북 -&gt; 학과서버\n\n규빈노트북의 내부의 어떤프로그램은 1+1이라는 명령을 복사하여 카카오톡으로 학과서버에 전달\n학과서버 내부의 어떤프로그램은 1+1이라는 명령을 카톡으로 받아서 그것을 ipython에게 전달\n\n- 학과서버 -&gt; 규빈노트북\n\n학과서버 내부의 ipython은 2라는 출력결과를 계산함\n학과서버 내부의 어떤프로그램은 계산결과를 카톡으로 규빈노트북에 알려줌\n규빈은 본인 노트북에서 편하게 계산결과를 받아볼 수 있다.\n\n\n\n11.2 모델2 – 원격컴퓨터 (일대다)\n- 개념: 2개 이상의 ipython 커널을 각각 다른 메모장에 연결가능.\n- 확장개념:\n\n2개 ipython 커널을 생성. 편의상 각각을 커널A,커널B라고 하자.\n커널A는 규빈노트북의 메모장에 커널B는 영미노트북의 메모장에 연결한다.\n영미와 규빈은 각각 독립적으로 작업가능\n\n- 의문?\n\n규빈은 python==3.10 을 쓰고 싶고 영미는 python==3.12 를 쓰고 싶다면??\n학과서버에 python==3.10 과 python==3.12 가 동시에 깔려야함.\n원래는 불가능하지만 “가상환경” 이라는 개념을 도입하면 가능하다. \\(\\to\\) 아나콘다의 등장\n\n\n\n11.3 모델3 – 클라우드 컴퓨터 (google colab)\n- 구글코랩\n\n구글에 여러가지 성능을 가진 컴퓨터가 \\(n\\)대 있음. 이 컴퓨터들을 연결하여 하나의 거대한 컴퓨터처럼 동작하게 만듦.\n이 컴퓨터는 학과서버처럼 동작함. 즉 여러명에게 컴퓨팅 자원을 분배함.\n\n- 구글코랩과 비슷한 방식으로 코드스페이스가 있음."
  },
  {
    "objectID": "posts/day1.html#원격제어-맥북",
    "href": "posts/day1.html#원격제어-맥북",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "12 원격제어 (맥북)",
    "text": "12 원격제어 (맥북)\n- ssh를 이용한 접속\n- 질문: 여기서 파이썬을 키면? 어떤 컴퓨터 spec으로 계산될까?\n- 한계점: ssh는 동일네트워크내에서만 동작한다. (진짜?)"
  },
  {
    "objectID": "posts/day1.html#local-remote",
    "href": "posts/day1.html#local-remote",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "13 local / remote",
    "text": "13 local / remote\n- local: 물리적으로 가까이 있음 + 네트워크 없이 접근\n\n강의실에 있는 윈도우 컴퓨터\n여러분이 가지고 있는 노트북\n\n- remote: 물리적으로 멀리 있음 + 네트워크를 통해 접근\n\n제서버1 (210.???.???.???)\n제서버2 (210.???.???.???)\n학과서버 (210.???.???.???)\n구글코랩\ncodespace\ngithub, google drive\n\n- 구분이 딱 떨어지는건 아님.. 그냥 아래의 정도로 이해하면 좋음\n\nlocal = 가까이\nremote = 멀리"
  },
  {
    "objectID": "posts/day1.html#코드스페이스-켜보기",
    "href": "posts/day1.html#코드스페이스-켜보기",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "14 코드스페이스 켜보기",
    "text": "14 코드스페이스 켜보기\n\n우리의 두 번째 리눅스 서버 얻기 (첫 서버는 코랩아닐까요?)\n\n- 단계1: 실습실컴퓨터로 깃헙에 로그인\n\n깃헙이란? 그냥 구글드라이브 같이 파일을 저장하는 기능을 한다고 이해하자.. (틀린 설명입니다!)\n\n- 단계2: New repository 를 이용하여 새로운 저장소를 만들자. 저장소 이름은 아무거나..\n\n저장소란?? 말그대로 파일,폴더들을 저장할 수 있는 것\n쉽게 생각하면 그냥 “큰” 폴더임.\n윈도우로 치면 downloada, desktop, 이런폴더들..\n\n\n- 단계3: 만들어진 저장소를 기반으로 codespace 생성\n\nlocal = 실습실컴퓨터\nremote = codespace\n\n- 단계4: codespace에서 아래의 명렁어들을 순서대로 실행하고 무엇을 의미하는지 공부하자.\nls\nls -a \nls .\nls .. \nls sample\nmkdir asdf \nwget https://raw.githubusercontent.com/guebin/DV2023/main/posts/titanic.csv\ncp titanic.csv ./asdf \nls ./asdf \nrm titanic.csv \nrm -rf asdf \n명령어들을 linux_commands.txt에 저장하자.\n- 단계5: 개인노트북으로 깃헙로그인\n\nlocal = 개인노트북\nremote = codespace\n\n- 단계6: 다시 코드스페이스에 접근하여 study_list.ipynb 주피터노트북을 만들자. 리스트만드는 방법을 공부하자.\nlst = [1,2,3] \n- 단계7: study_dict.py파일을 만들자. dict만드는 방법을 공부하자.\n# 방법1\ndct1 = {'a':1, 'b':2, 'c':3}\n\n# 방법2\ndct2 = dict(a=1,b=2,c=3)\n# 퀴즈1: 다시 코드스페이스에 접근하여 test.ipynb 주피터노트북을 만들고 아래 경로에 존재하는 파일을 다운로드하라.\nhttps://raw.githubusercontent.com/guebin/DV2023/main/posts/titanic.csv\n현재폴더에서 asdf폴더를 만들고 다운로드한 파일을 asdf 폴더로 옮겨라.\n(풀이1)\n!wget ~ \n!mkdir ~\n!cp ~\n!rm ~\n(풀이2)\n!wget ~ \n!mkdir ~\n!mv ~\n(풀이3) – 사실 이거는 “asdf 폴더를 만들고 그안에 다운로드하는 방식”이라 문제에서 요구하는 동작이랑 좀 다르긴해요 (결과는 똑같지만)\n!mkdir ~\n!wget ~ \n#"
  },
  {
    "objectID": "posts/day1.html#코드스페이스-rightarrow-깃헙-rightarrow-코랩",
    "href": "posts/day1.html#코드스페이스-rightarrow-깃헙-rightarrow-코랩",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "15 코드스페이스 \\(\\rightarrow\\) 깃헙 \\(\\rightarrow\\) 코랩",
    "text": "15 코드스페이스 \\(\\rightarrow\\) 깃헙 \\(\\rightarrow\\) 코랩\n- 코드스페이스에서 공부한 내용을 코랩에서 이어서 하고싶다.\n- 단계1: 코드스페이스에 접근\n\nlocal = 개인노트북\nremote = codespace\n\n- 단계2: 코드스페이스 \\(\\to\\) 깃헙 레포지토리\n\nlocal = codespace\nremote = github\n\n- 단계3: 코랩 \\(\\leftarrow\\) 깃헙 레포지토리\n\nlocal = colab\nremote = github\n\n!wget ~~~~~\n\n코랩에서 공부한 내용을 나중에 codespace에서 이어하려면 “코랩 \\(\\to\\) 깃헙” 의 과정이 가능해야함. 이건 다루지 않음.\n\n\n\n\n\n\n\nImportant\n\n\n\nlocal/remote 의 개념을 이해"
  },
  {
    "objectID": "posts/day1.html#블로그카피-fork",
    "href": "posts/day1.html#블로그카피-fork",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "16 블로그카피 (Fork)",
    "text": "16 블로그카피 (Fork)\n- 깃헙과 구글드라이브의 첫번째 차이: 깃헙은 기본적으로 “공개” 되어 있음.\n- !!! 생각해보니까 이 강의노트도 깃헙으로 만들지 않았을까??\n\n강의노트의 내용들은 깃헙 (=공개된 구글드라이브) 어딘가에 저장되어있을거야\n그걸 찾아내면? 강의노트를 힘들게 따라칠 필요가 없었잖아?\n\n- 여기있어요: https://github.com/guebin/DSTBX2025\n\n이 저장소를 포크로 콕 찍어서 내 저장소로 가져올 수 있을까? (마치 좋아하는 음식을 가져오는 것처럼)"
  },
  {
    "objectID": "posts/day1.html#코드스페이스에-quarto-설치",
    "href": "posts/day1.html#코드스페이스에-quarto-설치",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "17 코드스페이스에 quarto 설치",
    "text": "17 코드스페이스에 quarto 설치\n- 포크한 저장소를 기반으로 새로운 코드스페이스 생성\n- quarto 다운로드: https://quarto.org/docs/download/\n- 아래를 실행 (하면 안될걸?)\ndpkg -i quarto-1.6.39-linux-amd64.deb \n\n왜? https://imgs.xkcd.com/comics/sandwich.png\n\n- quarto-1.6.39-linux-amd64.deb 삭제"
  },
  {
    "objectID": "posts/day1.html#깃헙추가기능1-블로그-업로드",
    "href": "posts/day1.html#깃헙추가기능1-블로그-업로드",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "18 깃헙추가기능1: 블로그 업로드",
    "text": "18 깃헙추가기능1: 블로그 업로드\n- 깃헙과 구글드라이브의 두번째 차이: 깃헙은 단순한 저장소를 넘어 추가기능이 있음. 구체적으로 GitHub 레포지토리는 블로그 게시물을 자동으로 발행(publish)할 수 있는 기능을 지원함.\n- 코드스페이스에 quarto 설치 에서 명령어 수정하고, 그림삽입하여 업로드하자.\nquarto render \ngit add .\ngit commit -m .\ngit push\n- 깃헙에서 아래를 설정 – /docs 옆에 Save를 눌러야함\n\n- 꾸미기: 아래를 수정하자..\n\n_quarto.yml 수정\nauthor: \"최규빈\" 수정\nindex.qmd 수정\n\n\n\n\n\n\n\nImportant\n\n\n\n깃헙에 대한 좀 더 깊은 이해 (저장소의 의미, 구글드라이버와 차이점) 를 위해서 구성한 강의노트"
  },
  {
    "objectID": "posts/day1.html#리눅스명령어-hw",
    "href": "posts/day1.html#리눅스명령어-hw",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "19 리눅스명령어 – hw",
    "text": "19 리눅스명령어 – hw\n- 숙제: hw1.txt 파일 열어서 풀어보세요\n- 공부한것을 바탕으로 포스트작성.\n---\ntitle: \"hw1 -- 여러가지 리눅스 명령어\"\nauthor: \"최규빈\"\ndate: \"12/26/2024\"\n---"
  },
  {
    "objectID": "posts/day1.html#sh",
    "href": "posts/day1.html#sh",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "20 .sh",
    "text": "20 .sh\n- 블로그에 업로드할때마다..\nquarto render \ngit add .\ngit commit -m .\ngit push \n하는것 귀찮죠?\n- 자동화하는 방법.\n\npublish.sh 파일을 만든다.\nquarto render, git add ., git commit -m ., git push를 순서대로 친다.\n저장한다.\n터미널에서 bash push.sh 실행"
  },
  {
    "objectID": "posts/day1.html#vi-벼락치기",
    "href": "posts/day1.html#vi-벼락치기",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "21 vi 벼락치기",
    "text": "21 vi 벼락치기\n- 이건 꼭 알아야함\n\nvi를 이용하여 파일만들기\n편집모드 \\(\\leftrightarrow\\) 명령모드: i/a \\(\\leftrightarrow\\) esc\nvi를 이용하여 파일수정하기\nvi에서 편집후 저장 후 종료, 그냥 종료, 강제종료\n찾기: /asdf \\(\\to\\) 엔터 \\(\\to\\) n / shift+n\n\n- 이걸 알면 편리함 (은근히 손에 착착 붙음)\n\ndd: 줄삭제\n\n\n\n\n\n\n\nImportant\n\n\n\n여기까지는 리눅스에 대한 이해를 돕기 위해서 만들었습니다."
  },
  {
    "objectID": "posts/day1.html#잔소리",
    "href": "posts/day1.html#잔소리",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "22 잔소리",
    "text": "22 잔소리\n- 솔직히 리눅스 배우기 귀찮죠?\n- 리눅스 못하는 사람이 데이터분석하면 어떤 느낌이냐면.. 핸드폰으로 엑셀시트 정리하는 느낌??\n# 예제1 – 코랩에서 해보세요\n아래의 경로에서 데이터를 다운받아 df 로 저장하라.\n\nhttps://raw.githubusercontent.com/guebin/DV2023/main/posts/titanic.csv\n\n#\n# 예제2 – 아래의 코드를 실행하여 ucf101 dataset을 다운로드하라.\nfile_path = huggingface_hub.hf_hub_download(\n    repo_id=\"sayakpaul/ucf101-subset\",\n    filename=\"UCF101_subset.tar.gz\",\n    repo_type=\"dataset\"\n)\n아래를 코드를 변형하여 압축해제하라.\ntar -xvf UCF101_subset.tar.gz\n데이터를 살펴보라.\n\nref: https://guebin.github.io/MP2024/posts/06wk-1.html\n\n#"
  },
  {
    "objectID": "posts/day1.html#깃헙추가기능2-패키지-배포",
    "href": "posts/day1.html#깃헙추가기능2-패키지-배포",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "23 깃헙추가기능2: 패키지 배포",
    "text": "23 깃헙추가기능2: 패키지 배포\n- 깃헙과 구글드라이브의 두번째 차이: 깃헙은 단순한 저장소를 넘어 추가기능이 있음. 예를 들어, GitHub 레포지토리는 소프트웨어 패키지를 배포하는 데 활용될 수 있음.\n\n아래의 내용은 가급적 터미널로 해보세요\n\n1 저장소만들기\n\n저장소이름은 asdf로 하자. (대충 만들겠다는 의미)\n\n2 저장소에서 대충 아래와 같은 구조로 파일 및 디렉터리를 만든다.\nasdf/                  # GitHub 저장소 이름\n│\n├── pkg1226/           # Python에서 import할 때 사용하는 이름\n│   └── __init__.py    # 반드시 이 이름으로 작성해야 함\n│\n├── README.md          # 선택 사항 (없어도 무방)\n├── setup.py           # 패키지 설치 및 배포를 정의하는 파일로 반드시 이 이름이어야 함\n– __init__.py 파일내용\n\n\nasdf/mymodule/__init__.py\n\ndef hello_world():\n    return \"Hello from pkg1226!\"\n\n– setup.py 파일내용\n\n\nasdf/setup.py\n\nfrom setuptools import setup, find_packages\nsetup(\n        name=\"mypkg\", # pip install 할 때 사용되는이름\n        version=\"0.1.0\",\n        packages=find_packages(),\n)\n\n3. 반영사항을 저장소로 push 한다.\ngit add .\ngit commit -m .\ngit push \n4. 코랩 등 다른 환경으로 가서 방금 만든 패키지를 설치한다.\npip install git+https://github.com/miruetoto/asdf.git\n5. 테스트한다.\nimport pkg1226\npkg1226.hello_world()\n\n\n\n\n\n\nImportant\n\n\n\n패키지배포 경험해보고.. 리눅스 명령어로만 파일, 폴더를 구성하면서 리눅스 명령어에 익숙해졌으면 해서 구성한 강의노트입니다."
  },
  {
    "objectID": "posts/day1.html#ssh-우회하기",
    "href": "posts/day1.html#ssh-우회하기",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "24 ssh 우회하기",
    "text": "24 ssh 우회하기\n\n24.1 기본상태\n- 내부와이파이에서 182 접속해보기 – 성공\nssh toolbox@210.117.173.182\n# 비밀번호는 jbnu\n- 내부와이파이에서 183 접속해보기 – 성공\nssh guebin@210.117.173.183\n# 비밀번호는 jbnu\n- 외부와이파이에서 182 접속해보기 – 실패\nssh toolbox@210.117.173.182\n# 비밀번호는 jbnu\n- 외부와이파이에서 183 접속해보기 – 실패\nssh guebin@210.117.173.183\n# 비밀번호는 jbnu\n\n\n24.2 182 - 포트변경\n- 포트변경 – 실습X\n\n\n\n\n\n\nNote\n\n\n\n포트가뭐야?\n\n네트워크로 데이터가 드나드는 문\n네트워크로 데이터를 옮겨야 하는 경우 무조건 port를 이용해야한다.\n프로그램마다 암묵적으로 애용하는 포트가 있음!!\n\n아래는 well-known port 임\n\n\n\n\n\n\n\n\n프로그램\n포트 번호\n설명\n\n\n\n\nSSH\n22\n원격 접속 및 파일 전송 (보안)\n\n\nSMTP\n25\n이메일 전송\n\n\nDNS\n53\n도메인 이름 해석\n\n\nHTTP\n80\n웹사이트 전송\n\n\nPOP3\n110\n이메일 수신\n\n\nIMAP\n143\n이메일 수신 (POP3보다 발전된 방식)\n\n\nHTTPS\n443\n보안 웹사이트 전송\n\n\nMySQL\n3306\n데이터베이스\n\n\n리그 오브 레전드\n5223\nPVP.net 클라이언트\n\n\n리그 오브 레전드\n2099, 5222\n게임 데이터 전송\n\n\n스타크래프트\n6112\n배틀넷 및 게임 데이터 전송\n\n\n마인크래프트\n25565\n서버 호스팅 및 클라이언트 통신\n\n\nZoom\n8801-8802\n화상 회의\n\n\nJupyter\n8888\n데이터 분석\n\n\nRStudio\n8787\n데이터 분석\n\n\n\n\n\nvi /etc/ssh/sshd_config\n...\nPort 1226\n...\nservice ssh restart\n\n\n24.3 포트변경 이후\n- 내부와이파이에서 182접속하기 – 실패\nssh toolbox@210.117.173.182\n# 비밀번호는 jbnu\n- 내부와이파이에서 182접속하기 – 성공, (문법이 조금 바뀌었네?)\nssh toolbox@210.117.173.182 -p 1226 \n# 비밀번호는 jbnu\n- 외부와이파이에서 182접속하기 – 성공!!\nssh toolbox@210.117.173.182 -p 1226\n# 비밀번호는 jbnu\n- 내부와이파이에서 183접속하기 – 성공 (이건 원래 되던거였음)\nssh guebin@210.117.173.183\n# 비밀번호는 jbnu\n- 외부와이파이에서 183접속하기 (?? 못하지않나??)\nssh guebin@210.117.173.183\n# 비밀번호는 jbnu\n\n그런데 할 수 있어요"
  },
  {
    "objectID": "posts/day1.html#서버셋팅",
    "href": "posts/day1.html#서버셋팅",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "25 183 서버셋팅",
    "text": "25 183 서버셋팅\n\n25.1 ssh 연결\n- 183번 컴퓨터에 접속하기\nssh guebin@210.117.173.183 \n\n\n25.2 password 변경\n- 아래를 실행하여 비밀번호를 바꿀 것\npasswd\n- 이후 ssh로 접속할때 바뀐 pw를 입력한다.\nssh guebin@210.117.173.183\n\n\n25.3 아나콘다 설치\n- https://www.anaconda.com/download\n\n아나콘다를 다운받을 수 있는 주소 get // Linux 64-Bit (x86) Installer\nwget 으로 다운로드\nbash 로 실행\n동의할 내용 동의하고 설치 (글을 넘길때는 space이용)\n\n- 설치다하면 exit 하고 재접속.. 맨앞에 (base) 가 보이면 올바르게 설치된것임\n\n\n25.4 주피터랩 설치 및 실행\n- 가상환경 셋팅\nconda create -n first # 가상환경생성 \nconda activate first # 가상환경 활성화 \nconda install -c conda-forge notebook # 주피터랩설치\n- 접속하는 방법1: 토큰으로 접속\njupyter lab --ip \"0.0.0.0\" --port {8,학번끝3자리}\n이후에\n\nhttp://127.0.0.1:8052/lab?token=????\n\n와 같은 주소 형식을\n\nhttp://210.117.173.183:8052/lab?token=????\n\n와 같이 바꾸고 들어오세요\n- 접속하는 방법2: password로 접속\njupyter notebook password\n를 이용하여 passwd를 설정한 뒤 다시 아래를 실행\njupyter lab --ip \"0.0.0.0\" --port {8,학번끝3자리}\n\n\n\n\n\n\nImportant\n\n\n\n학과서버셋팅 연습을 위한 내용"
  },
  {
    "objectID": "posts/day1.html#학과서버셋팅-starstarstar-hw",
    "href": "posts/day1.html#학과서버셋팅-starstarstar-hw",
    "title": "Day1: 터미널의 이해 - 학과서버셋팅",
    "section": "26 학과서버셋팅 (\\(\\star\\star\\star\\)) – hw",
    "text": "26 학과서버셋팅 (\\(\\star\\star\\star\\)) – hw\n\n26.1 ssh 연결\n- 186 컴퓨터에 접속하기\nssh root@210.117.173.186 -p {학번끝5자리}\n\n\n26.2 password 변경\n- 아래를 실행하여 비밀번호를 바꿀 것\npasswd root\n- 이후 ssh로 접속할때 바뀐 pw를 입력한다.\nssh root@210.117.173.186 -p {학번끝5자리}\n\n\n26.3 아나콘다 설치\n\n\n26.4 주피터랩 설치 및 실행\n- 가상환경 셋팅\nconda create -n first # 가상환경생성 \nconda activate first # 가상환경 활성화 \nconda install -c conda-forge notebook # 주피터랩설치\n- password 설정\njupyter notebook password\n- 실행\njupyter lab --ip=\"0.0.0.0\" --port={MY-PORT} --no-browser --allow-root\n\n\n\n\n\n\nNote\n\n\n\nport는 자신의 학번을 기준으로, 십의자리와 만의자리를 바꾸며 사용할 수 있음. 예를들어 학번끝 5자리가 43052라면\n만의자리변경\n\n23052\n33052\n53052\n\n십의자리변경\n\n43002\n43012\n43022\n43032\n43042\n43062\n43072\n43082\n43092\n\n에 해당하는 port번호를 쓸 수 있음.\n\n\n\n\n\n\n\n\nImportant\n\n\n\n사실 이 부분이 가장 실용적인 내용입니다. 이해할 것은 없지만.."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "데이터과학 툴박스 (2025)",
    "section": "",
    "text": "수업계획\n\n12월26일(화) – 10:00~16:30 day1 수업\n12월27일(수) – 10:00~16:30 day2 수업\n12월30일(목) – 10:00~16:30 day3 수업\n12월31일(금) – 10:00~16:30 day4 수업\n1월2일(월) – 10:00~16:30 Q&A\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nDec 26, 2024\n\n\nDay1: 터미널의 이해 - 학과서버셋팅\n\n\n최규빈 \n\n\n\n\n\nNo matching items"
  }
]